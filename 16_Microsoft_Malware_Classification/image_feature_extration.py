import pickle as pkl
import os
import pandas as pd
import numpy as np
from scipy.sparse import hstack
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
import numpy as np
import os
import codecs
import imageio
import array
from datetime import datetime as dt
from tqdm import tqdm
import gc
from numpy import vstack
from numpy import hstack

def getPickel(path):
    file = open(path,'rb')
    obj =  pkl.load(file)
    return obj

def putPickel(var,path):
    file = open(path,'wb')
    pkl.dump(var,file)
    file.close()

def extract_images_from_text(arr_of_filenames):
    vecs = []
    count = 0
    for file_name in tqdm(arr_of_filenames):
        file_path = os.path.join(files_asm,file_name+".asm")
        asm_file = codecs.open(file_path, 'rb')
        size_asm_file = os.path.getsize(file_path)        
        
        width_of_file = int(size_asm_file**0.5)
        
        remainder = size_asm_file % width_of_file
        
        array_of_image = array.array('B')
        
        array_of_image.fromfile(asm_file, size_asm_file-remainder)
        
        asm_file.close()
        
        arr_of_generated_image = np.uint8(array_of_image)
             
        vecs.append(arr_of_generated_image[:800])
        
        count+=1
        if count%500 == 0:
            gc.collect()
    
    return np.array(vecs)

def parts(st,end):
    output = extract_images_from_text(file_names[st:end])
    putPickel(output,os.path.join(images_asm,f"asm_img_{st}_{end}.pkl"))

files_asm = "/scratch/sisodiya.bhoomendra/asr_file/"
images_asm = "/scratch/sisodiya.bhoomendra/asm_image/"
asmfile_list=os.listdir(files_asm)
file_names = getPickel("/scratch/sisodiya.bhoomendra/file_name.pkl")

parts(0,1000)
gc.collect()
parts(1000,2000)
gc.collect()
parts(2000,3000)
gc.collect()
parts(3000,4000)
gc.collect()
parts(4000,5000)
gc.collect()
parts(5000,6000)
gc.collect()
parts(6000,7000)
gc.collect()
parts(7000,8000)
gc.collect()
parts(8000,9000)
gc.collect()
parts(9000,10000)
gc.collect()
parts(10000,len(file_names))
gc.collect()


### MERGEING all the Files to make it into  a single feature file#########

paths = ["/scratch/sisodiya.bhoomendra/asm_image/asm_img_0_1000.pkl","/scratch/sisodiya.bhoomendra/asm_image/asm_img_1000_2000.pkl"
,"/scratch/sisodiya.bhoomendra/asm_image/asm_img_2000_3000.pkl"
,"/scratch/sisodiya.bhoomendra/asm_image/asm_img_3000_4000.pkl","/scratch/sisodiya.bhoomendra/asm_image/asm_img_4000_5000.pkl"
,"/scratch/sisodiya.bhoomendra/asm_image/asm_img_5000_6000.pkl","/scratch/sisodiya.bhoomendra/asm_image/asm_img_6000_7000.pkl"
,"/scratch/sisodiya.bhoomendra/asm_image/asm_img_7000_8000.pkl","/scratch/sisodiya.bhoomendra/asm_image/asm_img_8000_9000.pkl"
,"/scratch/sisodiya.bhoomendra/asm_image/asm_img_9000_10000.pkl","/scratch/sisodiya.bhoomendra/asm_image/asm_img_10000_10868.pkl"
]


all_img_asm = []
for path in paths:
    all_img_asm.append(getPickel(path))
asm_features = vstack(all_img_asm)
putPickel(asm_features,"/scratch/sisodiya.bhoomendra/asm_img_features_800.pkl")
X = getPickel("/scratch/sisodiya.bhoomendra/X_size_asm_1_Class_1_asm_51_byte_2000_size_1.pkl")
final_X = hstack([X,asm_features])
putPickel(final_X,"/scratch/sisodiya.bhoomendra/X_size_asm_1_Class_1_asm_51_byte_2000_size_1_asm_img_800.pkl")
